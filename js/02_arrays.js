/**
 * МАССИВЫ В JAVASCRIPT
 * ====================
 * 
 * Этот файл содержит подробную информацию о массивах в JavaScript:
 * как их создавать, как с ними работать, и какие методы использовать
 * для эффективной обработки данных.
 */

// ===== СОЗДАНИЕ МАССИВОВ =====

/**
 * Массив - это упорядоченная коллекция элементов, доступ к которым
 * осуществляется по числовым индексам, начиная с 0.
 * 
 * В JavaScript есть несколько способов создания массивов:
 */

// Литерал массива - самый распространенный и рекомендуемый способ
const fruits = ["яблоко", "банан", "апельсин"];

// Конструктор Array - альтернативный способ
const numbers = new Array(1, 2, 3, 4, 5);

// Создание пустого массива
const emptyArray1 = [];             // Предпочтительный способ
const emptyArray2 = new Array();    // Альтернативный способ

/**
 * ВНИМАНИЕ: Конструктор Array имеет особенность!
 * Если передать только одно число, оно будет воспринято как длина массива,
 * а не как элемент массива.
 */

// Создание массива с предопределенной длиной
const arrayWithLength = new Array(5); // Создаст массив [empty × 5]
console.log(arrayWithLength.length);  // 5

/**
 * Другие способы создания массивов:
 */

// Array.from() - создает массив из массивоподобного объекта или итерируемого объекта
const letters = Array.from("hello"); // ["h", "e", "l", "l", "o"]

// Array.of() - создает массив из переданных аргументов
const digits = Array.of(1, 2, 3); // [1, 2, 3]

// ===== ДОСТУП К ЭЛЕМЕНТАМ МАССИВА =====

/**
 * Доступ к элементам массива осуществляется через квадратные скобки с индексом.
 * Индексы начинаются с 0 (первый элемент имеет индекс 0).
 */

// Доступ по индексу
console.log(fruits[0]); // "яблоко"
console.log(fruits[1]); // "банан"
console.log(fruits[2]); // "апельсин"

/**
 * Если вы обращаетесь к индексу, которого нет в массиве,
 * JavaScript вернет undefined, а не ошибку.
 */

// Доступ к несуществующему элементу
console.log(fruits[3]); // undefined

// Изменение элемента по индексу
fruits[1] = "груша";
console.log(fruits); // ["яблоко", "груша", "апельсин"]

/**
 * Свойство length возвращает количество элементов в массиве.
 * Это свойство всегда на 1 больше, чем индекс последнего элемента.
 */

// Длина массива
console.log(fruits.length); // 3

// Доступ к последнему элементу
console.log(fruits[fruits.length - 1]); // "апельсин"

// ===== ОСНОВНЫЕ МЕТОДЫ МАССИВОВ =====

/**
 * JavaScript предоставляет множество встроенных методов для работы с массивами.
 * Вот некоторые из наиболее часто используемых:
 */

/**
 * Методы для добавления и удаления элементов:
 * - push(): добавляет элементы в конец массива
 * - unshift(): добавляет элементы в начало массива
 * - pop(): удаляет последний элемент и возвращает его
 * - shift(): удаляет первый элемент и возвращает его
 */

// Добавление элементов
const planets = ["Земля", "Марс"];
planets.push("Венера");       // Добавляет в конец, возвращает новую длину (3)
console.log(planets);         // ["Земля", "Марс", "Венера"]

planets.unshift("Меркурий");  // Добавляет в начало, возвращает новую длину (4)
console.log(planets);         // ["Меркурий", "Земля", "Марс", "Венера"]

// Удаление элементов
const lastPlanet = planets.pop();  // Удаляет с конца, возвращает удаленный элемент
console.log(lastPlanet);           // "Венера"
console.log(planets);              // ["Меркурий", "Земля", "Марс"]

const firstPlanet = planets.shift(); // Удаляет с начала, возвращает удаленный элемент
console.log(firstPlanet);           // "Меркурий"
console.log(planets);               // ["Земля", "Марс"]

/**
 * Методы для поиска элементов:
 * - indexOf(): находит индекс первого вхождения элемента
 * - lastIndexOf(): находит индекс последнего вхождения элемента
 * - includes(): проверяет наличие элемента (возвращает true/false)
 * - find(): находит первый элемент, удовлетворяющий условию
 * - findIndex(): находит индекс первого элемента, удовлетворяющего условию
 */

// Поиск элементов
const colors = ["красный", "зеленый", "синий", "зеленый"];

// indexOf - возвращает индекс первого найденного элемента или -1
console.log(colors.indexOf("зеленый"));     // 1
console.log(colors.indexOf("желтый"));      // -1
console.log(colors.indexOf("зеленый", 2));  // 3 (начинает поиск с индекса 2)

// lastIndexOf - возвращает индекс последнего найденного элемента или -1
console.log(colors.lastIndexOf("зеленый")); // 3

// includes - проверяет наличие элемента, возвращает true или false
console.log(colors.includes("синий"));      // true
console.log(colors.includes("желтый"));     // false

// find - возвращает первый элемент, удовлетворяющий условию, или undefined
const numbers2 = [5, 12, 8, 130, 44];
const found = numbers2.find(element => element > 10);
console.log(found); // 12

// findIndex - возвращает индекс первого элемента, удовлетворяющего условию, или -1
const foundIndex = numbers2.findIndex(element => element > 10);
console.log(foundIndex); // 1

/**
 * Методы для объединения и разделения массивов:
 * - concat(): объединяет массивы
 * - slice(): возвращает часть массива
 * - splice(): изменяет содержимое массива, удаляя/заменяя/добавляя элементы
 * - join(): объединяет элементы массива в строку
 */

// Объединение и разделение массивов
const arr1 = [1, 2];
const arr2 = [3, 4];

// concat - объединяет массивы (не изменяет исходные массивы)
const combined = arr1.concat(arr2);
console.log(combined); // [1, 2, 3, 4]
console.log(arr1);     // [1, 2] (исходный массив не изменился)

// slice - возвращает часть массива (не изменяет исходный массив)
const numbers3 = [1, 2, 3, 4, 5];
console.log(numbers3.slice(2));     // [3, 4, 5] (с индекса 2 до конца)
console.log(numbers3.slice(1, 4));  // [2, 3, 4] (с индекса 1 до 4, не включая 4)
console.log(numbers3.slice(-2));    // [4, 5] (последние 2 элемента)
console.log(numbers3);              // [1, 2, 3, 4, 5] (исходный массив не изменился)

/**
 * ВАЖНО: splice() изменяет исходный массив!
 * Синтаксис: array.splice(start[, deleteCount[, item1[, item2[, ...]]]])
 * - start: индекс, с которого начинать изменение
 * - deleteCount: количество элементов для удаления
 * - item1, item2, ...: элементы для добавления
 */

// splice - изменяет содержимое массива, удаляя/заменяя/добавляя элементы
const months = ["Янв", "Март", "Апр", "Июнь"];
months.splice(1, 0, "Фев");         // Вставляет "Фев" на позицию 1
console.log(months);                // ["Янв", "Фев", "Март", "Апр", "Июнь"]

months.splice(4, 1, "Май");         // Заменяет 1 элемент на позиции 4 на "Май"
console.log(months);                // ["Янв", "Фев", "Март", "Апр", "Май"]

// join - объединяет элементы массива в строку
console.log(months.join());         // "Янв,Фев,Март,Апр,Май"
console.log(months.join(" - "));    // "Янв - Фев - Март - Апр - Май"

// ===== ПЕРЕБОР ЭЛЕМЕНТОВ МАССИВА =====

/**
 * Существует несколько способов перебора элементов массива:
 * - for: классический цикл
 * - for...of: современный способ для перебора значений
 * - forEach(): метод массива для перебора элементов
 */

const items = ["item1", "item2", "item3"];

// for - классический способ
for (let i = 0; i < items.length; i++) {
  console.log(items[i]);
}

// for...of - современный и более читаемый способ
for (const item of items) {
  console.log(item);
}

// forEach - метод массива, принимающий функцию обратного вызова
items.forEach(item => {
  console.log(item);
});

// forEach с индексом
items.forEach((item, index) => {
  console.log(`${index}: ${item}`);
});

// ===== ПРЕОБРАЗОВАНИЕ МАССИВОВ =====

/**
 * JavaScript предоставляет мощные методы для преобразования массивов:
 * - map(): создает новый массив с результатами вызова функции для каждого элемента
 * - filter(): создает новый массив с элементами, прошедшими проверку
 * - reduce(): сводит массив к одному значению
 * - sort(): сортирует элементы массива
 * - reverse(): обращает порядок элементов в массиве
 */

const numbers4 = [1, 2, 3, 4, 5];

/**
 * map() - создает новый массив, применяя функцию к каждому элементу
 * Не изменяет исходный массив
 */
const doubled = numbers4.map(num => num * 2);
console.log(doubled); // [2, 4, 6, 8, 10]
console.log(numbers4); // [1, 2, 3, 4, 5] (исходный массив не изменился)

/**
 * filter() - создает новый массив с элементами, прошедшими проверку
 * Не изменяет исходный массив
 */
const evenNumbers = numbers4.filter(num => num % 2 === 0);
console.log(evenNumbers); // [2, 4]
console.log(numbers4); // [1, 2, 3, 4, 5] (исходный массив не изменился)

/**
 * reduce() - сводит массив к одному значению
 * Синтаксис: array.reduce(callback[, initialValue])
 * - callback: функция, применяемая к каждому элементу
 * - initialValue: начальное значение аккумулятора
 * 
 * Функция callback принимает 4 аргумента:
 * - accumulator: аккумулятор (результат предыдущего вызова)
 * - currentValue: текущий элемент
 * - currentIndex: индекс текущего элемента
 * - array: массив, по которому идет перебор
 */
const sum = numbers4.reduce((total, num) => total + num, 0);
console.log(sum); // 15

/**
 * ВАЖНО: sort() изменяет исходный массив!
 * По умолчанию сортирует элементы как строки в лексикографическом порядке.
 */

// sort - сортирует элементы массива (изменяет исходный массив)
const fruits2 = ["банан", "яблоко", "груша", "апельсин"];
fruits2.sort();
console.log(fruits2); // ["апельсин", "банан", "груша", "яблоко"]

// Сортировка чисел (по умолчанию сортирует как строки)
const nums = [40, 1, 5, 200];
nums.sort();
console.log(nums); // [1, 200, 40, 5] (лексикографическая сортировка)

// Правильная сортировка чисел
nums.sort((a, b) => a - b);
console.log(nums); // [1, 5, 40, 200] (числовая сортировка по возрастанию)

nums.sort((a, b) => b - a);
console.log(nums); // [200, 40, 5, 1] (числовая сортировка по убыванию)

/**
 * ВАЖНО: reverse() изменяет исходный массив!
 */

// reverse - обращает порядок элементов в массиве
const letters2 = ["a", "b", "c"];
letters2.reverse();
console.log(letters2); // ["c", "b", "a"]

// ===== МНОГОМЕРНЫЕ МАССИВЫ =====

/**
 * Многомерный массив - это массив, элементами которого являются другие массивы.
 * Наиболее распространены двумерные массивы (матрицы).
 */

// Двумерный массив (матрица)
const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

// Доступ к элементам
console.log(matrix[1][2]); // 6 (элемент во второй строке, третьем столбце)

// Перебор элементов двумерного массива
for (let i = 0; i < matrix.length; i++) {
  for (let j = 0; j < matrix[i].length; j++) {
    console.log(matrix[i][j]);
  }
}

// ===== ПРОВЕРКА МАССИВА =====

/**
 * Для проверки, является ли переменная массивом, используйте Array.isArray()
 */

// Проверка, является ли переменная массивом
console.log(Array.isArray([]));        // true
console.log(Array.isArray([1, 2, 3])); // true
console.log(Array.isArray({}));        // false
console.log(Array.isArray("array"));   // false

/**
 * ПРАКТИЧЕСКИЕ СОВЕТЫ:
 * 
 * 1. Используйте литерал массива [] вместо конструктора new Array()
 * 2. Помните, что некоторые методы (splice, sort, reverse) изменяют исходный массив
 * 3. Для неизменяемых операций используйте методы, которые возвращают новый массив (map, filter)
 * 4. Используйте for...of для перебора элементов массива вместо классического for
 * 5. Для сортировки чисел всегда передавайте функцию сравнения в sort()
 * 6. Используйте Array.isArray() для проверки, является ли переменная массивом
 */
